<%perl>

my $UserObj = RT::User->new(RT->SystemUser);
$UserObj->Load($HTML::Mason::Commands::session{'CurrentUser'}->id);

my $user_info = {
    EmailAddress    => RT::Interface::Web::RequestENV('mail') || RT::Interface::Web::RequestENV('uwnetid') . '@uw.edu',
    RealName        => RT::Interface::Web::RequestENV('displayName') || RT::Interface::Web::RequestENV('cn'),
    Organization    => RT::Interface::Web::RequestENV('department'),
    WorkPhone       => RT::Interface::Web::RequestENV('phone'),
};

# set the attributes that have been defined.
foreach my $attribute ( $UserObj->WritableAttributes ) {
    my $method = "Set$attribute";
    $UserObj->$method( $user_info->{$attribute} ) if defined $user_info->{$attribute};
}

# reload CurrentUser
$HTML::Mason::Commands::session{'CurrentUser'}->Load($HTML::Mason::Commands::session{'CurrentUser'}->id);

my %newgroups;

my $principal = $UserObj->PrincipalObj;

my $gwsstem = quotemeta RT->Config->Get('GWSGroupStem');

# add to groups they are supposed to be in
my @groups = split(/;/, RT::Interface::Web::RequestENV('gws_groups'));
foreach my $gwsgroup (@groups) {
    # not in the GWS stem we want
    next unless $gwsgroup =~ /^urn:mace:washington.edu:groups:($gwsstem(_.*)?)$/;
    my $groupname = $1;

    $newgroups{$groupname} = 1;

    my $group = RT::Group->new($RT::SystemUser);
    $group->LoadUserDefinedGroup($groupname);

    # membership is current
    next if ($group->HasMember($principal));

    # add them
    my ($status, $msg) = $group->AddMember($principal->Id);
    if ($status) {
        $RT::Logger->debug("Added ".$UserObj->Name." to ".$group->Name." [$msg]");
    } else {
        $RT::Logger->error("Couldn't add ".$UserObj->Name." to ".$group->Name." [$msg]");
    }

}

# remove from groups they are not supposed to be in
my $groups = $UserObj->OwnGroups;
while (my $group = $groups->Next()) {
    # not a GWS group
    next unless $group->Name =~ /^$gwsstem(_.*)?$/;

    # membership is current
    next if ($newgroups{$group->Name});

    # remove them
    my ($status, $msg) = $group->DeleteMember($principal->Id);
    if ($status) {
        $RT::Logger->debug("Removed ".$UserObj->Name." from ".$group->Name." [$msg]");
    } else {
        $RT::Logger->error("Couldn't remove ".$UserObj->Name." from ".$group->Name." [$msg]");
    }
}

# self-service only unless they are in one of our groups
my $priv = keys %newgroups;
if ( ($priv and not $UserObj->Privileged) or (not $priv and $UserObj->Privileged) ) {
    my ($status, $msg) = $UserObj->SetPrivileged($priv);
    if ($status) {
        $RT::Logger->debug("Set ".$UserObj->Name." to ".($priv?"Privileged":"Unprivileged")." [$msg]");
    } else {
        $RT::Logger->error("Couldn't set ".$UserObj->Name." to ".($priv?"Privileged":"Unprivileged")." [$msg]");
    }
}

</%perl>
